name: ci

on:
  pull_request:
    branches: [ main, production ]

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      # with:
      #   node-version: '20'
      #   cache: 'npm'
      #   cache-dependency-path: frontend/package-lock.json
    
    # - name: Verify package-lock.json exists
    #   run: |
    #     echo "Checking for package-lock.json in frontend directory:"
    #     ls -la frontend/package-lock.json || echo "package-lock.json not found!"
    #     echo "Contents of frontend directory:"
    #     ls -la frontend/
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      # run: |
      #   if [ -f package-lock.json ]; then
      #     echo "package-lock.json found, running npm ci"
      #     npm ci
      #   else
      #     echo "package-lock.json not found, running npm install"
      #     npm install
      #   fi
    
    - name: Lint
      working-directory: frontend
      run: npm run lint
    
    - name: Type check
      working-directory: frontend
      run: npm run typecheck
    
    - name: Test
      working-directory: frontend
      # run: npm run test
      run: npm run test:run
    
    - name: Build
      working-directory: frontend
      run: npm run build

  backend-build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: ipa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Rust
      # uses: actions-rs/toolchain@v1
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev pkg-config libssl-dev
    
    - name: Check formatting
      working-directory: backend
      # run: cargo fmt -- --check
      run: make fmt-check
    
    - name: Run clippy
      working-directory: backend
      run: cargo clippy -- -D warnings
    
    - name: Run tests
      working-directory: backend
      # run: |
      #   echo "Current directory: $(pwd)"
      #   echo "Contents:"
      #   ls -la
      #   echo "Migrations directory:"
      #   ls -la migrations/ || echo "Migrations directory not found"
      #   cargo test
      run: cargo test
    
    - name: Build
      working-directory: backend
      # run: cargo build --release
      run: cargo build

  e2e-testing:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      # with:
      #   node-version: '20'
      #   cache: 'npm'
      #   cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Start services
      run: |
        cd backend
        docker compose up -d postgres redis minio meilisearch
        sleep 30
    
    - name: Run e2e tests
      run: |
        cd frontend
        npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30
